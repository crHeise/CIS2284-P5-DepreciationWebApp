@page "/inventory"

@inject InventoryItemServices service

<div class="container">
    <div class="row bg-light">
        <table class="table table-bordered">
            <thead class="thead-dark">
                <tr>
                    <th>Item Id</th>
                    <th>Title</th>
                    <th>Starting Value</th>
                    <th>Date Added</th>
                    <th>Delete Product</th>
                </tr>
            </thead>
            <tbody>
                @if (Items.Any())
                {
                    @foreach (var item in Items)
                    {
                        //maybe add a check for isActive here before displaying
                        <tr @onclick="(() => SetItemForUpdate(item))">
                            <td>@item.Id</td>
                            <td>@item.Title</td>
                            <td>@item.StartValue</td>
                            <td>@item.DateAdded.ToString()</td>
                            <td><button class="btn btn-danger" @onclick="(() => DeleteItem(item))">Delete</button></td>
                        </tr>
                    }
                }
                else
                {
                    <tr><td colspan="6"><strong>No items available</strong></td></tr>
                }
            </tbody>
        </table>
    </div>
    <div class="row m-5">
        <div class="col-5 bg-light m-2 justify-content-start">
            <div class="p-3 mb-3 bg-primary text-white text-center">Add New Item</div>
            <EditForm Model="@NewItem">
                <div class="form-group">
                    <label for="title">Item Title</label>
                    <input type="text" id="title" class="form-control" @bind-value="@NewItem.Title" />
                </div>
                <div class="form-group">
                    <label for="startValue">Starting Value</label>
                    <input type="text" id="startValue" class="form-control" @bind="@NewItem.StartValue" />
                </div>
                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="AddNewItem"> Add Item</button>
                </div>
            </EditForm>
        </div>
        <div class="col-5 bg-light m-2 justify-content-end">
            <div class="p-3 mb-1 bg-primary text-white text-center">Update Product</div>
            <EditForm Model="@UpdateItem">
                <div class="form-group">
                    <label for="title">Item Title</label>
                    <input type="text" id="title" class="form-control" @bind-value="@UpdateItem.Title" />
                </div>
                <div class="form-group">
                    <label for="startValue">Start Value</label>
                    <input type="text" id="startValue" class="form-control" @bind="@UpdateItem.StartValue" />
                </div>
                <div class="text-center p-3 mb-3">
                    <button class="btn btn-info" @onclick="UpdateItemData"> Update Product</button>
                </div>
            </EditForm>
        </div>
    </div>
</div>

@code {
    List<InventoryItem> Items = new List<InventoryItem>();

    protected override async Task OnInitializedAsync()
    {
        await RefreshItems();
    }

    private async Task RefreshItems()
    {
        Items = await service.GetInventoryAsync();
    }

    public InventoryItem NewItem { get; set; } = new InventoryItem();

    private async Task AddNewItem()
    {
        await service.AddItemAsync(NewItem);
        NewItem = new InventoryItem();
        await RefreshItems();
    }

    InventoryItem UpdateItem = new InventoryItem();
    private void SetItemForUpdate(InventoryItem item)
    {
        UpdateItem = item;
    }

    private async Task UpdateItemData()
    {
        await service.UpdateItemAsync(UpdateItem);
        await RefreshItems();
    }

    private async Task DeleteItem(InventoryItem item)
    {
        await service.DeleteItemAsync(item);
        await RefreshItems();
    }
}
